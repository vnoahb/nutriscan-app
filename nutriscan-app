<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NutriScan - Cost-Effective Diet Tracker</title>
    <style>
        :root {
            --primary-color: #4CAF50;
            --secondary-color: #FF9800;
            --background-color: #f5f5f5;
            --card-color: #ffffff;
            --text-color: #333333;
            --border-radius: 8px;
            --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: var(--background-color);
            color: var(--text-color);
            line-height: 1.6;
            padding-bottom: 60px;
        }

        header {
            background-color: var(--primary-color);
            color: white;
            text-align: center;
            padding: 1rem;
            box-shadow: var(--box-shadow);
        }

        nav {
            display: flex;
            justify-content: space-around;
            background-color: #3d8c40;
            padding: 0.5rem;
        }

        nav a {
            color: white;
            text-decoration: none;
            padding: 0.5rem 1rem;
            border-radius: var(--border-radius);
            transition: background-color 0.3s;
        }

        nav a:hover, nav a.active {
            background-color: rgba(255, 255, 255, 0.2);
        }

        .container {
            max-width: 800px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        .card {
            background-color: var(--card-color);
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }

        h2 {
            color: var(--primary-color);
            margin-bottom: 1rem;
        }

        .search-container {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .search-box {
            display: flex;
            gap: 0.5rem;
        }

        input[type="text"], input[type="number"] {
            flex: 1;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: var(--border-radius);
            font-size: 1rem;
        }

        button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-size: 1rem;
            transition: background-color 0.3s;
        }

        button:hover {
            background-color: #3d8c40;
        }

        button.secondary {
            background-color: var(--secondary-color);
        }

        button.secondary:hover {
            background-color: #e08800;
        }

        .button-group {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .food-details {
            display: none;
            margin-top: 1.5rem;
        }

        .nutrition-info {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 1rem;
            margin: 1.5rem 0;
        }

        .nutrition-item {
            background-color: #f0f8f0;
            padding: 1rem;
            border-radius: var(--border-radius);
            text-align: center;
        }

        .nutrition-value {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--primary-color);
        }

        .nutrition-label {
            font-size: 0.9rem;
            color: #666;
        }

        .price-input {
            margin: 1.5rem 0;
        }

        .cost-efficiency {
            margin-top: 1.5rem;
            padding: 1rem;
            background-color: #fff8e1;
            border-radius: var(--border-radius);
            border-left: 4px solid var(--secondary-color);
        }

        .efficiency-value {
            font-size: 1.25rem;
            font-weight: bold;
            color: var(--secondary-color);
            margin-top: 0.5rem;
        }

        .section {
            display: none;
        }

        .section.active {
            display: block;
        }

        .history-item {
            border-bottom: 1px solid #eee;
            padding: 1rem 0;
        }

        .history-item:last-child {
            border-bottom: none;
        }

        .history-details {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .history-actions {
            display: flex;
            gap: 0.5rem;
        }

        .history-actions button {
            padding: 0.25rem 0.5rem;
            font-size: 0.8rem;
        }

        .login-form, .register-form {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .login-form button, .register-form button {
            align-self: flex-start;
        }

        .user-profile {
            display: none;
        }

        .loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            visibility: hidden;
            opacity: 0;
            transition: opacity 0.3s, visibility 0.3s;
        }

        .loading-screen.active {
            visibility: visible;
            opacity: 1;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #f3f3f3;
            border-radius: 50%;
            border-top: 5px solid var(--primary-color);
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .barcode-scanner {
            display: none;
            flex-direction: column;
            align-items: center;
            gap: 1rem;
            margin-top: 1rem;
        }

        #scanner-container {
            width: 100%;
            max-width: 400px;
            height: 300px;
            overflow: hidden;
            position: relative;
            border: 2px solid #ddd;
            border-radius: var(--border-radius);
        }

        #scanner-container video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .error-message {
            color: #d32f2f;
            margin-top: 0.5rem;
            font-size: 0.9rem;
        }

        .success-message {
            color: var(--primary-color);
            margin-top: 0.5rem;
            font-size: 0.9rem;
        }

        .placeholder-image {
            width: 100%;
            height: 200px;
            background-color: #f0f0f0;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: var(--border-radius);
            margin-bottom: 1rem;
        }

        .tabs {
            display: flex;
            margin-bottom: 1rem;
        }

        .tab {
            padding: 0.5rem 1rem;
            cursor: pointer;
            border-bottom: 2px solid transparent;
        }

        .tab.active {
            border-bottom: 2px solid var(--primary-color);
            color: var(--primary-color);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .footer-nav {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background-color: var(--card-color);
            display: flex;
            justify-content: space-around;
            padding: 0.75rem 0;
            box-shadow: 0 -2px 5px rgba(0,0,0,0.1);
        }

        .footer-nav a {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-decoration: none;
            color: #666;
            font-size: 0.8rem;
        }

        .footer-nav a.active {
            color: var(--primary-color);
        }

        .footer-nav i {
            font-size: 1.5rem;
            margin-bottom: 0.25rem;
        }

        /* Media queries for responsive design */
        @media (max-width: 600px) {
            .container {
                margin: 1rem auto;
            }

            .nutrition-info {
                grid-template-columns: repeat(2, 1fr);
            }

            .button-group {
                flex-direction: column;
            }
        }
    </style>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/quagga/0.12.1/quagga.min.js"></script>
</head>
<body>
    <header>
        <h1>NutriScan</h1>
        <p>Find cost-effective and nutritious food options</p>
    </header>

    <div class="footer-nav">
        <a href="#" class="nav-link active" data-section="home-section">
            <i class="fas fa-home"></i>
            <span>Home</span>
        </a>
        <a href="#" class="nav-link" data-section="history-section">
            <i class="fas fa-history"></i>
            <span>History</span>
        </a>
        <a href="#" class="nav-link" data-section="account-section">
            <i class="fas fa-user"></i>
            <span>Account</span>
        </a>
    </div>

    <div class="loading-screen">
        <div class="spinner"></div>
    </div>

    <div class="container">
        <!-- Home Section -->
        <div class="section active" id="home-section">
            <div class="card">
                <h2>Search Food</h2>
                <div class="search-container">
                    <div class="search-box">
                        <input type="text" id="food-search" placeholder="Enter food name or barcode">
                        <button id="search-btn">Search</button>
                    </div>
                    <div class="button-group">
                        <button id="scan-btn" class="secondary">
                            <i class="fas fa-barcode"></i> Scan Barcode
                        </button>
                    </div>
                    <div class="barcode-scanner">
                        <div id="scanner-container"></div>
                        <button id="cancel-scan" class="secondary">Cancel</button>
                    </div>
                </div>
            </div>

            <div class="food-details card">
                <h2 id="food-name">Food Name</h2>
                <div class="placeholder-image">
                    <i class="fas fa-image" style="font-size: 3rem; color: #ccc;"></i>
                </div>
                <div class="nutrition-info">
                    <div class="nutrition-item">
                        <div class="nutrition-value" id="calories">0</div>
                        <div class="nutrition-label">Calories</div>
                    </div>
                    <div class="nutrition-item">
                        <div class="nutrition-value" id="protein">0g</div>
                        <div class="nutrition-label">Protein</div>
                    </div>
                    <div class="nutrition-item">
                        <div class="nutrition-value" id="carbs">0g</div>
                        <div class="nutrition-label">Carbs</div>
                    </div>
                    <div class="nutrition-item">
                        <div class="nutrition-value" id="fat">0g</div>
                        <div class="nutrition-label">Fat</div>
                    </div>
                </div>

                <div class="price-input">
                    <h3>Enter Price Information</h3>
                    <div style="display: flex; gap: 1rem; margin-top: 0.5rem;">
                        <input type="number" id="price" placeholder="Price ($)" step="0.01">
                        <input type="number" id="weight" placeholder="Weight (g)" step="1">
                    </div>
                    <button id="calculate-btn" style="margin-top: 1rem;">Calculate Cost Efficiency</button>
                </div>

                <div class="tabs">
                    <div class="tab active" data-tab="overall">Overall Efficiency</div>
                    <div class="tab" data-tab="protein">Protein Focus</div>
                    <div class="tab" data-tab="calories">Calorie Focus</div>
                </div>

                <div class="tab-content active" id="overall-tab">
                    <div class="cost-efficiency">
                        <h3>Overall Nutritional Value per Dollar</h3>
                        <div class="efficiency-value" id="overall-efficiency">-</div>
                    </div>
                </div>

                <div class="tab-content" id="protein-tab">
                    <div class="cost-efficiency">
                        <h3>Protein per Dollar</h3>
                        <div class="efficiency-value" id="protein-efficiency">-</div>
                    </div>
                </div>

                <div class="tab-content" id="calories-tab">
                    <div class="cost-efficiency">
                        <h3>Calories per Dollar</h3>
                        <div class="efficiency-value" id="calorie-efficiency">-</div>
                    </div>
                </div>

                <button id="save-btn" style="margin-top: 1rem;">Save to History</button>
            </div>
        </div>

        <!-- History Section -->
        <div class="section" id="history-section">
            <div class="card">
                <h2>Your Food History</h2>
                <div id="history-list">
                    <!-- History items will be added here dynamically -->
                    <div class="placeholder-message" style="text-align: center; padding: 2rem;">
                        <i class="fas fa-history" style="font-size: 3rem; color: #ccc; margin-bottom: 1rem;"></i>
                        <p>Your food history will appear here.</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Account Section -->
        <div class="section" id="account-section">
            <div class="card">
                <h2>Account</h2>
                <div id="login-register-forms">
                    <div class="tabs">
                        <div class="tab active" data-tab="login">Login</div>
                        <div class="tab" data-tab="register">Register</div>
                    </div>

                    <div class="tab-content active" id="login-tab">
                        <form class="login-form">
                            <input type="email" id="login-email" placeholder="Email" required>
                            <input type="password" id="login-password" placeholder="Password" required>
                            <button type="submit" id="login-btn">Login</button>
                            <div class="error-message" id="login-error"></div>
                        </form>
                    </div>

                    <div class="tab-content" id="register-tab">
                        <form class="register-form">
                            <input type="text" id="register-name" placeholder="Name" required>
                            <input type="email" id="register-email" placeholder="Email" required>
                            <input type="password" id="register-password" placeholder="Password" required>
                            <button type="submit" id="register-btn">Register</button>
                            <div class="error-message" id="register-error"></div>
                            <div class="success-message" id="register-success"></div>
                        </form>
                    </div>
                </div>

                <div class="user-profile">
                    <h3>Welcome, <span id="user-name">User</span>!</h3>
                    <div style="margin: 1.5rem 0;">
                        <h4>Preferences</h4>
                        <div style="margin-top: 1rem;">
                            <label>Preferred Nutrition Focus:</label>
                            <select id="nutrition-focus" style="margin-top: 0.5rem; padding: 0.5rem; width: 100%;">
                                <option value="overall">Overall Nutrition</option>
                                <option value="protein">Protein</option>
                                <option value="calories">Calories</option>
                            </select>
                        </div>
                    </div>
                    <button id="logout-btn" class="secondary">Logout</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // App state
        const appState = {
            currentFood: null,
            foodHistory: [],
            currentUser: null,
            isLoading: false
        };

        // DOM Elements
        const sections = document.querySelectorAll('.section');
        const navLinks = document.querySelectorAll('.nav-link');
        const foodSearch = document.getElementById('food-search');
        const searchBtn = document.getElementById('search-btn');
        const scanBtn = document.getElementById('scan-btn');
        const barcodeScanner = document.querySelector('.barcode-scanner');
        const cancelScan = document.getElementById('cancel-scan');
        const foodDetails = document.querySelector('.food-details');
        const loadingScreen = document.querySelector('.loading-screen');
        const calculateBtn = document.getElementById('calculate-btn');
        const saveBtn = document.getElementById('save-btn');
        const historyList = document.getElementById('history-list');
        const tabs = document.querySelectorAll('.tab');
        const tabContents = document.querySelectorAll('.tab-content');
        const loginForm = document.querySelector('.login-form');
        const registerForm = document.querySelector('.register-form');
        const userProfile = document.querySelector('.user-profile');
        const logoutBtn = document.getElementById('logout-btn');
        const userName = document.getElementById('user-name');
        const nutritionFocus = document.getElementById('nutrition-focus');

        // Initialize from localStorage
        function initApp() {
            // Load food history
            const savedHistory = localStorage.getItem('foodHistory');
            if (savedHistory) {
                appState.foodHistory = JSON.parse(savedHistory);
                renderFoodHistory();
            }

            // Load user data
            const savedUser = localStorage.getItem('currentUser');
            if (savedUser) {
                appState.currentUser = JSON.parse(savedUser);
                updateUserInterface();
            }
        }

        // Navigation
        navLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const sectionId = link.getAttribute('data-section');
                
                // Update active section
                sections.forEach(section => {
                    section.classList.remove('active');
                });
                document.getElementById(sectionId).classList.add('active');
                
                // Update active nav link
                navLinks.forEach(navLink => {
                    navLink.classList.remove('active');
                });
                link.classList.add('active');
            });
        });

        // Tab functionality
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const tabParent = tab.parentElement;
                const tabContents = tabParent.parentElement.querySelectorAll('.tab-content');
                const tabId = tab.getAttribute('data-tab');
                
                // Update active tab
                tabParent.querySelectorAll('.tab').forEach(t => {
                    t.classList.remove('active');
                });
                tab.classList.add('active');
                
                // Update active tab content
                tabContents.forEach(content => {
                    content.classList.remove('active');
                });
                
                const targetContent = Array.from(tabContents).find(content => content.id === `${tabId}-tab`);
                if (targetContent) {
                    targetContent.classList.add('active');
                }
            });
        });

        // Loading screen functions
        function showLoading() {
            appState.isLoading = true;
            loadingScreen.classList.add('active');
        }

        function hideLoading() {
            appState.isLoading = false;
            loadingScreen.classList.remove('active');
        }

        // Search food
        searchBtn.addEventListener('click', () => {
            const query = foodSearch.value.trim();
            if (query) {
                searchFood(query);
            }
        });

        foodSearch.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const query = foodSearch.value.trim();
                if (query) {
                    searchFood(query);
                }
            }
        });

        // Barcode scanning
        let quaggaInitialized = false;

        scanBtn.addEventListener('click', () => {
            barcodeScanner.style.display = 'flex';
            initBarcodeScanner();
        });

        cancelScan.addEventListener('click', () => {
            barcodeScanner.style.display = 'none';
            if (quaggaInitialized) {
                Quagga.stop();
                quaggaInitialized = false;
            }
        });

        function initBarcodeScanner() {
            if (quaggaInitialized) {
                Quagga.stop();
            }

            Quagga.init({
                inputStream: {
                    name: "Live",
                    type: "LiveStream",
                    target: document.querySelector('#scanner-container'),
                    constraints: {
                        facingMode: "environment"
                    },
                },
                decoder: {
                    readers: ["ean_reader", "ean_8_reader", "upc_reader", "upc_e_reader"]
                }
            }, function(err) {
                if (err) {
                    console.error(err);
                    return;
                }
                quaggaInitialized = true;
                Quagga.start();
            });

            Quagga.onDetected((result) => {
                const barcode = result.codeResult.code;
                foodSearch.value = barcode;
                barcodeScanner.style.display = 'none';
                Quagga.stop();
                quaggaInitialized = false;
                searchFood(barcode);
            });
        }

        // Search for food using Open Food Facts API
        async function searchFood(query) {
            showLoading();
            
            try {
                let url;
                // Check if query is likely a barcode (only numbers and appropriate length)
                if (/^\d{8,14}$/.test(query)) {
                    url = `https://world.openfoodfacts.org/api/v2/product/${query}.json`;
                } else {
                    url = `https://world.openfoodfacts.org/cgi/search.pl?search_terms=${encodeURIComponent(query)}&json=1&page_size=1`;
                }
                
                const response = await fetch(url);
                const data = await response.json();
                
                if (data.status === 1 && data.product) {
                    // Barcode search result
                    processFoodData(data.product);
                } else if (data.products && data.products.length > 0) {
                    // Text search result
                    processFoodData(data.products[0]);
                } else {
                    alert('Food not found. Please try another search term.');
                }
            } catch (error) {
                console.error('Error fetching food data:', error);
                alert('Error searching for food. Please try again.');
            } finally {
                hideLoading();
            }
        }

        // Process and display food data
        function processFoodData(product) {
            const foodName = product.product_name || 'Unknown Food';
            const calories = product.nutriments?.energy_value || product.nutriments?.energy || 0;
            const protein = product.nutriments?.proteins || 0;
            const carbs = product.nutriments?.carbohydrates || 0;
            const fat = product.nutriments?.fat || 0;
            
            // Store current food data
            appState.currentFood = {
                name: foodName,
                calories: calories,
                protein: protein,
                carbs: carbs,
                fat: fat,
                barcode: product.code || null
            };
            
            // Update UI
            document.getElementById('food-name').textContent = foodName;
            document.getElementById('calories').textContent = Math.round(calories);
            document.getElementById('protein').textContent = `${protein.toFixed(1)}g`;
            document.getElementById('carbs').textContent = `${carbs.toFixed(1)}g`;
            document.getElementById('fat').textContent = `${fat.toFixed(1)}g`;
            
            // Show food details
            foodDetails.style.display = 'block';
            
            // Reset price inputs
            document.getElementById('price').value = '';
            document.getElementById('weight').value = '';
            
            // Reset efficiency values
            document.getElementById('overall-efficiency').textContent = '-';
            document.getElementById('protein-efficiency').textContent = '-';
            document.getElementById('calorie-efficiency').textContent = '-';
        }

        // Calculate cost efficiency
        calculateBtn.addEventListener('click', () => {
            const price = parseFloat(document.getElementById('price').value);
            const weight = parseFloat(document.getElementById('weight').value);
            
            if (!price || price <= 0) {
                alert('Please enter a valid price.');
                return;
            }
            
            if (!weight || weight <= 0) {
                alert('Please enter a valid weight in grams.');
                return;
            }
            
            if (!appState.currentFood) {
                alert('Please search for a food first.');
                return;
            }
            
            // Calculate efficiencies
            const caloriesPerDollar = (appState.currentFood.calories * (weight / 100)) / price;
            const proteinPerDollar = (appState.currentFood.protein * (weight / 100)) / price;
            const nutrientScore = (appState.currentFood.protein * 4 + appState.currentFood.carbs * 2 + appState.currentFood.fat * 2) * (weight / 100) / price;
            
            // Update UI
            document.getElementById('overall-efficiency').textContent = `${nutrientScore.toFixed(1)} points/$`;
            document.getElementById('protein-efficiency').textContent = `${proteinPerDollar.toFixed(1)}g/$`;
            document.getElementById('calorie-efficiency').textContent = `${caloriesPerDollar.toFixed(0)} kcal/$`;
            
            // Update current food with efficiency data
            appState.currentFood.price = price;
            appState.currentFood.weight = weight;
            appState.currentFood.caloriesPerDollar = caloriesPerDollar;
            appState.currentFood.proteinPerDollar = proteinPerDollar;
            appState.currentFood.nutrientScore = nutrientScore;
        });

        // Save to history
        saveBtn.addEventListener('click', () => {
            if (!appState.currentFood || !appState.currentFood.price) {
                alert('Please search for a food and calculate cost efficiency first.');
                return;
            }
            
            // Add timestamp and push to history
            const foodItem = {
                ...appState.currentFood,
                timestamp: new Date().toISOString()
            };
            
            appState.foodHistory.unshift(foodItem);
            
            // Save to localStorage
            localStorage.setItem('foodHistory', JSON.stringify(appState.foodHistory));
            
            alert('Food saved to history!');
            renderFoodHistory();
        });

        // Render food history
        function renderFoodHistory() {
            if (appState.foodHistory.length === 0) {
                historyList.innerHTML = `
                    <div class="placeholder-message" style="text-align: center; padding: 2rem;">
                        <i class="fas fa-history" style="font-size: 3rem; color: #ccc; margin-bottom: 1rem;"></i>
                        <p>Your food history will appear here.</p>
                    </div>
                `;
                return;
            }
            
            historyList.innerHTML = '';
            
            appState.foodHistory.forEach((item, index) => {
                const date = new Date(item.timestamp).toLocaleDateString();
                
                const historyItem = document.createElement('div');
                historyItem.className = 'history-item';
                historyItem.innerHTML = `
                    <div class="history-details">
                        <div>
                            <h3>${item.name}</h3>
                            <p>${date}</p>
                        </div>
                        <div class="history-actions">
                            <button class="view-btn" data-index="${index}">View</button>
                            <button class="delete-btn" data-index="${index}">Delete</button>
                        </div>
                    </div>
                    <div class="history-expanded" style="display: none; margin-top: 1rem;">
                        <div class="nutrition-info" style="grid-template-columns: repeat(4, 1fr);">
                            <div class="nutrition-item">
                                <div class="nutrition-value">${Math.round(item.calories)}</div>
                                <div class="nutrition-label">Calories</div>
                            </div>
                            <div class="nutrition-item">
                                <div class="nutrition-value">${item.protein.toFixed(1)}g</div>
                                <div class="nutrition-label">Protein</div>
                            </div>
                            <div class="nutrition-item">
                                <div class="nutrition-value"
                                <div class="nutrition-value">${item.carbs.toFixed(1)}g</div>
                                <div class="nutrition-label">Carbs</div>
                            </div>
                            <div class="nutrition-item">
                                <div class="nutrition-value">${item.fat.toFixed(1)}g</div>
                                <div class="nutrition-label">Fat</div>
                            </div>
                        </div>
                        <div class="cost-efficiency" style="margin-top: 1rem;">
                            <p>Price: $${item.price.toFixed(2)} for ${item.weight}g</p>
                            <p>Calories per dollar: ${item.caloriesPerDollar.toFixed(0)} kcal/$</p>
                            <p>Protein per dollar: ${item.proteinPerDollar.toFixed(1)}g/$</p>
                            <p>Overall nutrition score: ${item.nutrientScore.toFixed(1)} points/$</p>
                        </div>
                    </div>
                `;
                
                historyList.appendChild(historyItem);
                
                // Add event listeners for view and delete buttons
                const viewBtn = historyItem.querySelector('.view-btn');
                const deleteBtn = historyItem.querySelector('.delete-btn');
                const expandedContent = historyItem.querySelector('.history-expanded');
                
                viewBtn.addEventListener('click', () => {
                    if (expandedContent.style.display === 'none') {
                        expandedContent.style.display = 'block';
                        viewBtn.textContent = 'Hide';
                    } else {
                        expandedContent.style.display = 'none';
                        viewBtn.textContent = 'View';
                    }
                });
                
                deleteBtn.addEventListener('click', () => {
                    appState.foodHistory.splice(index, 1);
                    localStorage.setItem('foodHistory', JSON.stringify(appState.foodHistory));
                    renderFoodHistory();
                });
            });
        }

        // User account management
        loginForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const email = document.getElementById('login-email').value;
            const password = document.getElementById('login-password').value;
            const errorElement = document.getElementById('login-error');
            
            // Get users from localStorage
            const users = JSON.parse(localStorage.getItem('users') || '[]');
            const user = users.find(u => u.email === email && u.password === password);
            
            if (user) {
                errorElement.textContent = '';
                appState.currentUser = { name: user.name, email: user.email, preferences: user.preferences || {} };
                localStorage.setItem('currentUser', JSON.stringify(appState.currentUser));
                updateUserInterface();
            } else {
                errorElement.textContent = 'Invalid email or password.';
            }
        });

        registerForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const name = document.getElementById('register-name').value;
            const email = document.getElementById('register-email').value;
            const password = document.getElementById('register-password').value;
            const errorElement = document.getElementById('register-error');
            const successElement = document.getElementById('register-success');
            
            // Get users from localStorage
            const users = JSON.parse(localStorage.getItem('users') || '[]');
            
            // Check if email already exists
            if (users.some(u => u.email === email)) {
                errorElement.textContent = 'Email already registered.';
                successElement.textContent = '';
                return;
            }
            
            // Add new user
            users.push({ name, email, password, preferences: {} });
            localStorage.setItem('users', JSON.stringify(users));
            
            errorElement.textContent = '';
            successElement.textContent = 'Registration successful! You can now log in.';
            
            // Reset form
            registerForm.reset();
        });

        logoutBtn.addEventListener('click', () => {
            appState.currentUser = null;
            localStorage.removeItem('currentUser');
            updateUserInterface();
        });

        nutritionFocus.addEventListener('change', () => {
            if (appState.currentUser) {
                appState.currentUser.preferences.nutritionFocus = nutritionFocus.value;
                localStorage.setItem('currentUser', JSON.stringify(appState.currentUser));
            }
        });

        function updateUserInterface() {
            const loginRegisterForms = document.getElementById('login-register-forms');
            
            if (appState.currentUser) {
                loginRegisterForms.style.display = 'none';
                userProfile.style.display = 'block';
                userName.textContent = appState.currentUser.name;
                
                // Set preferences
                if (appState.currentUser.preferences && appState.currentUser.preferences.nutritionFocus) {
                    nutritionFocus.value = appState.currentUser.preferences.nutritionFocus;
                }
            } else {
                loginRegisterForms.style.display = 'block';
                userProfile.style.display = 'none';
            }
        }

        // Initialize the app
        initApp();
    </script>
</body>
</html>
